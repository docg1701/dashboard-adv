"""Create initial schema

Revision ID: 0001
Revises:
Create Date: 2024-06-26 12:00:00.000000

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
# from sqlalchemy.dialects import postgresql # No longer needed for VECTOR if using pgvector.sqlalchemy
from pgvector.sqlalchemy import Vector # Import Vector for migration

# Ensure this import path is correct for your project structure
# It's needed if UserRole is defined relative to the models directory from where alembic runs
try:
    from app.models.enums import UserRole
except ImportError:
    # Fallback if running alembic from a different CWD, adjust as necessary
    # This might happen if your alembic env.py doesn't add `app` to sys.path correctly
    from backend.app.models.enums import UserRole


# revision identifiers, used by Alembic.
revision: str = '0001'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('email', sa.String(length=255), nullable=False),
    sa.Column('hashed_password', sa.String(length=255), nullable=True),
    sa.Column('google_id', sa.String(length=255), nullable=True),
    sa.Column('role', sa.Enum(UserRole, name="user_role_enum", create_type=True), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False, server_default=sa.true()),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_google_id'), 'users', ['google_id'], unique=True)
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_index(op.f('ix_users_role'), 'users', ['role'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_users_role'), table_name='users')
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_index(op.f('ix_users_google_id'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')

    # Downgrade for UserRole enum type if it was created with create_type=True
    # Ensure UserRole is available in this scope for the sa.Enum call
    enum_type = sa.Enum(UserRole, name="user_role_enum", create_type=False) # Set create_type=False for drop
    enum_type.drop(op.get_bind(), checkfirst=False)
    # ### end Alembic commands ###
