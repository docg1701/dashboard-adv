"""Modify user role to use Enum type and add index

Revision ID: 9d1910135b7c
Revises: 124d96ee2afe
Create Date: 2025-04-20 13:46:33.660837

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '9d1910135b7c'
down_revision: Union[str, None] = '124d96ee2afe'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Create enum type first
    user_role_enum = postgresql.ENUM('ADMIN', 'USER', name='user_role_enum', create_type=True)
    user_role_enum.create(op.get_bind())
    
    # Then alter the column to use the enum type with USING clause
    op.execute("ALTER TABLE users ALTER COLUMN role TYPE user_role_enum USING role::user_role_enum")
    
    # Create index on role column
    op.create_index(op.f('ix_users_role'), 'users', ['role'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_users_role'), table_name='users')
    
    # Convert back to VARCHAR
    op.execute("ALTER TABLE users ALTER COLUMN role TYPE VARCHAR(50) USING role::text")
    
    # Drop the enum type
    user_role_enum = postgresql.ENUM(name='user_role_enum')
    user_role_enum.drop(op.get_bind())
    # ### end Alembic commands ###