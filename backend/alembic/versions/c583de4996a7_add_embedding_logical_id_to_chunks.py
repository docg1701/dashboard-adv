"""add_embedding_logical_id_to_chunks

Revision ID: c583de4996a7
Revises: 9d1910135b7c
Create Date: 2025-06-24 00:00:00.000000

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
# If you are using sqlalchemy_pgvector for a VECTOR type:
# from sqlalchemy_pgvector.alembic import VectorOp # Or similar import based on library

# revision identifiers, used by Alembic.
revision: str = 'c583de4996a7'
down_revision: Union[str, None] = '9d1910135b7c'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('document_chunks',
        sa.Column('embedding', sa.Text(), nullable=True) # Placeholder: Use sa.TEXT or pgvector.VECTOR(dims)
    )
    op.add_column('document_chunks',
        sa.Column('logical_chunk_id', sa.String(length=255), nullable=True)
    )
    op.create_index(op.f('ix_document_chunks_logical_chunk_id'), 'document_chunks', ['logical_chunk_id'], unique=False)

    # Add unique constraint for (document_id, logical_chunk_id)
    # This is important for the ON CONFLICT clause in vector_store_handler.py
    op.create_unique_constraint(
        '_document_logical_chunk_uc', # Constraint name
        'document_chunks',
        ['document_id', 'logical_chunk_id']
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint('_document_logical_chunk_uc', 'document_chunks', type_='unique')
    op.drop_index(op.f('ix_document_chunks_logical_chunk_id'), table_name='document_chunks')
    op.drop_column('document_chunks', 'logical_chunk_id')
    op.drop_column('document_chunks', 'embedding')
    # ### end Alembic commands ###
